//  -----------------------
//  -----------------------
//       CEL•AUT•WEB
//  -----------------------
//  -----------------------
syntax = "proto3";
package celaut;


/*
    The formats that have bytes type, such as "formal," will continue to be that way; 
    nodes that have a specific format will be able to add it to their celaut.proto files without any issue... 
    It makes no sense for the message to self-define in those parts, as it goes against the philosophy behind protobuf.
*/

//  -----------------------
//  DEFINITIONS.
//  -----------------------

message DataFormat {
    repeated string tags = 1;
    string prose = 2;
    bytes formal = 3;
}

message ContractLedger {
    bytes contract = 1;
    string contract_addr = 2;
    string ledger = 3;
}

message Metadata {
    message HashTag {
        message Hash {
            bytes type = 1;
            bytes value = 2;
        }
        message AttrHashTag {
            int32 key = 1;  // the attribute's index.
            repeated HashTag value = 2;  // HashTag, if it's a repeated field, the HashTags of every one.
        }
        repeated Hash hash = 1;
        repeated string tag = 2;
        repeated AttrHashTag attr_hashtag = 3; // List of metadata fields. Ordened by indexes defined on format.
    }
    optional HashTag hashtag = 1;
    optional DataFormat format = 2;
    repeated ContractLedger reputation_proofs = 3;
}


//  -----------------------
//  SERVICE SPECIFICATION.
//  -----------------------
message Service {
    // API: Defines how you can interact with the service, the ports where it listens, the communication protocols that it supports, methods and the different errors and responses that it can give.
    message Api {
        message Protocol {
            repeated string tags = 1;
            string prose = 2;
            bytes formal = 3;
        }
        message Slot {
            int32 port = 1;
            repeated Protocol protocol_stack = 2;
        }
        repeated Slot slot = 2;
        repeated ContractLedger payment_contracts = 3;
        // Cost function can be applied. <- must be optional.
    }

    // Container:  Specifies the container where the service runs, microarchitecture, entry point and filesystem (DAG?), and environment variables.
    message Container {
        message Architecture {
            repeated string tags = 1;
            string prose = 2;
            bytes formal = 3;
        }
        message Filesystem {
            message ItemBranch {
                message Link {
                    string src = 1;
                    string dst = 2;
                }
                string name = 1; // id for path
                oneof item {
                    bytes file = 2;
                    Link link = 3;
                    Filesystem filesystem = 4;
                }
            }
            repeated ItemBranch branch = 1;
        }
        message Config {
            repeated string path = 1;
            DataFormat format = 2;
        }
        Architecture architecture = 1;
        bytes filesystem = 2;
        map<string, DataFormat> enviroment_variables = 3;
        repeated string entrypoint = 4;
        Config config = 5;
        repeated Api.Protocol node_protocol_stack = 6;  // Expected node protocol stack
    }

    message Network {
        repeated string tags = 1;
        string prose = 2;
        bytes formal = 3;
    }

    string prose = 1;
    Container container = 2;
    Api api = 3;
    repeated Network network = 4;
}


//  ------------------------
//  INSTANCE SPECIFICATION.
//  ------------------------
// Used for specify node peers, node-host instancies, ledger-nodes instancies
message Instance {
    message Uri {
        string ip = 1;
        int32 port = 2;
    }
    message Uri_Slot {
        int32 internal_port = 1;
        repeated Uri uri = 2;
    }
    Service.Api api = 1;
    repeated Uri_Slot uri_slot = 2; // map like [ 8080 -> 192.17.0.4:6899],
}


//  -------------------------------
//  SERVICE INITIAL CONFIGURATION.
//  -------------------------------
// The __config__ file is mounted on each service on the filesystem's root.

message Configuration {
    map<string, bytes> enviroment_variables = 1;
    repeated int32 spec_slot = 2;
}

message ConfigurationFile {
    Instance gateway = 1;
    Configuration config = 2;
    Sysresources initial_sysresources = 3;
}

//  ------------------------
//  SYSTEM RESOURCES.
//  ------------------------
message Sysresources {                           //  https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.update
    optional uint64 blkio_weight = 1;
    optional uint64 cpu_period = 2;
    optional uint64 cpu_quota = 3;  // https://wbhegedus.me/understanding-kubernetes-cpu-limits/
    optional uint64 mem_limit = 4;
    optional uint64 disk_space = 5;

    // optional double disk_failure_tolerance = 10;
    // optional double process_failure_tolerance = 11;
    // optional double network_failure_tolerance = 12;
}
