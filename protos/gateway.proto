syntax = "proto3";
package gateway;
import "celaut.proto";
import "buffer.proto";

message GasAmount {
    string n = 1;
}

message TokenMessage {
    string token = 1;
    optional string slot = 2;
}

message EstimatedCost {
    GasAmount cost = 1;
    GasAmount min_maintenance_cost = 2;
    GasAmount max_maintenance_cost = 3;
    int32 maintenance_seconds_loop = 4;
    float variance = 5;
    int32 comb_resource_selected = 6;
}

message Refund {
    GasAmount amount = 1;
}

message SignRequest {
    string public_key = 1;
    string to_sign = 2;
}

message SignResponse {
    string signed = 1;
}

message Payment {
    string deposit_token = 1;
    celaut.Service.Api.ContractLedger contract_ledger = 3;
    GasAmount gas_amount = 4;
}

message Metrics {
    GasAmount gas_amount = 1;
}

message Instance {
    optional celaut.Any.Metadata instance_meta = 1;
    celaut.Instance instance = 2;
    optional string token = 3;
}

message Client {
    string client_id = 1;
}

message RecursionGuard {
    string token = 1;
}

message CombinationResources {
    message Clause {
        message Priority {
            enum Attribute {
              START_SERVICE_TIME = 0;
              COST_BLKIO_WEIGHT = 1;
              COST_CPU_PERIOD = 2;
              COST_CPU_QUOTA = 3;
              COST_MEM_LIMIT = 4;
              COST_DISK_SPACE = 5;
              VARIANCE_BLKIO_WEIGHT = 6;
              VARIANCE_CPU_PERIOD = 7;
              VARIANCE_CPU_QUOTA = 8;
              VARIANCE_MEM_LIMIT = 9;
              VARIANCE_DISK_SPACE = 10;
            }
            Attribute attribute = 1;
            int32 weight = 2;
        }
        int32 cost_weight = 1; //    Service balancer will compute score = weight / cost * RELATION_FACTOR
        optional celaut.Sysresources min_sysreq = 2;  // init system specs.
        optional celaut.Sysresources max_sysreq = 3;  // minimum system specs that the node needs to 've for it sometime.
        optional int32 start_service_time = 4;
        repeated Priority priorities = 5;
    }
    map<int32, Clause> clause = 1; // OR
}

message Configuration {
    celaut.Configuration config = 1;
    optional CombinationResources resources = 2;
    optional GasAmount initial_gas_amount = 3;
}

message ModifyServiceSystemResourcesOutput {
    celaut.Sysresources sysreq = 1;
    GasAmount gas = 2;
}

message ModifyServiceSystemResourcesInput {
    celaut.Sysresources min_sysreq = 1;
    celaut.Sysresources max_sysreq = 2;
}

message ModifyGasDepositInput {
    GasAmount gas_difference = 1;
    string service_token = 2;
}

message ModifyGasDepositOutput {
    bool success = 1;
    string message = 2;
}

// GRPC.

service Gateway {
    rpc StartService( stream buffer.Buffer) returns ( stream buffer.Buffer) {} // Configuration | Hash | Client | RecursionGuard | Service -> Instance
    rpc StopService(stream buffer.Buffer) returns (stream buffer.Buffer) {} // TokenMessage -> Refund
    rpc ModifyGasDeposit(stream buffer.Buffer) returns (stream buffer.Buffer) {}  // ModifyGasDepositInput -> ModifyGasDepositOutput

    rpc GetInstance(stream buffer.Buffer) returns (stream buffer.Buffer) {} //  -> Instance
    rpc IntroducePeer(stream buffer.Buffer) returns (stream buffer.Buffer) {} // Instance -> 
    rpc GenerateClient(stream buffer.Buffer) returns (stream buffer.Buffer) {} //  -> Client
    
    rpc GenerateDepositToken(stream buffer.Buffer) returns (stream buffer.Buffer) {} //  Client -> TokenMessage
    rpc Payable(stream buffer.Buffer) returns (stream buffer.Buffer) {} // Payment -> Empty

    rpc SignPublicKey(stream buffer.Buffer) returns (stream buffer.Buffer) {} // SignRequest -> SignResponse

    rpc ModifyServiceSystemResources(stream buffer.Buffer) returns (stream buffer.Buffer) {} // ModifyServiceSystemResourcesInput ->

    rpc Pack(stream buffer.Buffer) returns (stream buffer.Buffer) {} // bytes -> pack.PackOutputServiceId || compile.Service || Metadata || pack.PackOutputError

    rpc GetServiceEstimatedCost(stream buffer.Buffer) returns (stream buffer.Buffer) {} // ( celaut.Any.Metadata.HashTag.Hash=H, celaut.Any=S; { H v S } ) -> EstimatedCost
    rpc GetService(stream buffer.Buffer) returns (stream buffer.Buffer) {}  // ( celaut.Any.Metadata.HashTag.Hash=H ) -> Service
    rpc GetMetrics(stream buffer.Buffer) returns (stream buffer.Buffer) {} // TokenMessage -> Metrics

    rpc ServiceTunnel(stream buffer.Buffer) returns (stream buffer.Buffer) {} // TokenMessage || bytes -> bytes
}
